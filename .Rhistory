barplot(table(dado))
dado <- sample(x=1:6, size=10000, replace = TRUE)
print(dado)
sum(dado == 3)
mean(dado == 3)  #ou sum(dado == 3)/10000
barplot(table(dado))
table(idoso$Survived)
idoso <- dados[dados$Age >= 60,]
treinamento <- iris[1:n,]
iris
iris <- iris[sample(nrow(iris)),]
iris
n <- round(0.8*nrow(iris))
n
treinamento <- iris[1:n,]
teste <- iris[-(1:n),]
summary(teste)
ggplot(data = treinamento, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point(size = 2, alpha = 0.5)+
theme_minimal()
iris
iris <- iris[sample(nrow(iris)),]
iris
n <- round(0.8*nrow(iris))
n
treinamento <- iris[1:n,]
teste <- iris[-(1:n),]
summary(teste)
ggplot(data = treinamento, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point(size = 2, alpha = 0.5)+
theme_minimal()
library(ggplot2)
iris
iris <- iris[sample(nrow(iris)),]
iris
n <- round(0.8*nrow(iris))
n
treinamento <- iris[1:n,]
teste <- iris[-(1:n),]
summary(teste)
ggplot(data = treinamento, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point(size = 2, alpha = 0.5)+
theme_minimal()
library(randomForest)
cancer <- read.table(file = "cancer.csv", sep = ",", header = TRUE)
cancer <- na.omit(cancer)
str(cancer)
n <- round(0.8*nrow(cancer))
indices_treino <- sample(1:nrow(cancer), size = n, replace = FALSE)
treino <- cancer[indices_treino,]
install.packages(randomForest)
install.packages('randomForest')
library(randomForest)
install.packages('randomForest')
library(randomForest)
library(randomForest)
install.packages('randomForest')
library(randomForest)
cancer <- read.table(file = "cancer.csv", sep = ",", header = TRUE)
cancer <- na.omit(cancer)
library(randomForest)
library(rvest)
library(dplyr)
library(stringr)
library(geobr)
library(ggplot2)
url <- "https://pt.wikipedia.org/wiki/Lista_de_unidades_federativas_do_Brasil_por_alfabetiza%C3%A7%C3%A3o"
html <- read_html(url)
tabelas <- html |>
html_elements("table") |>
html_table()
View(tabelas)
alfabetizacao <- tabelas[[3]]
View(alfabetizacao)
alfabetizacao <- alfabetizacao[,c(2,3)]
names(alfabetizacao) <- c("estado", "taxa")
names(alfabetizacao)
parte1 <- str_replace_all(alfabetizacao$taxa, pattern = ",", replacement = ".")
parte2 <- str_replace_all(string = parte1, pattern = "%", replacement = "")
parte_final <- as.numeric(parte2)
alfabetizacao$taxa <- parte_final
minas <- read_state(code_state = "MG")
ggplot(data = minas) +
theme_minimal() +
geom_sf()
municipioMG <- read_municipality(code_muni = "MG")
ggplot(data = municipioMG) +
theme_minimal()+
geom_sf()
estados <- read_state()
estados$name_state
order(estados$name_state)
estados[2,]
estados <- estados[order(estados$name_state),]
estados
alfabetizacao <- alfabetizacao[order(alfabetizacao$estado),]
alfabetizacao$estado
estados <- estados[order(estados$name_state),]
estados$taxa <- alfabetizacao$taxa
ggplot(data = estados, aes(fill = taxa)) +
geom_sf()+
scale_fill_gradient(low = '#56b1f7', high = '#132b43')
gc()
library(rvest)
library(dplyr)
url <- "https://www.bbc.com/portuguese/articles/cql3lwgl3ldo"
html <- read_html(url)
html
titulo <- html |>
html_elements('h1') |>
html_text2()
titulo <- ("Editar DNA é ético? O debate sobre tecnologia que promete revolucionar vidas")
noticia <- html |>
html_elements("p.bbc-hhl7in") |>
html_text2()
noticia <- paste(noticia, collapse= " ")
artigos <- data.frame(titulo, noticia)
library(tidytext)
library(tidytext)
library(dplyr)
library(ggplot2)
library(tidyr)
library(stopwords)
library(rvest)
url <- "https://www.bbc.com/portuguese/articles/c3dv8yy3d8jo"
html <- read_html(url)
html |>
html_elements("p") |>
html_text2()
html |>
html_elements("p.bbc-h7hl7in") |>
html_text2()
html |>
html_elements("p.bbc-hhl7in") |>
html_text2()
paste("a","b")
html <- read_html(url)
texto <- html |>
html_elements("p.bbc-hhl7in") |>
html_text2()
paste0(texto)
url <- "https://www.bbc.com/portuguese/articles/cql3lwgl3ldo"
html <- read_html(url)
html
titulo <- html |>
html_elements('h1') |>
html_text2()
titulo <- ("Editar DNA é ético? O debate sobre tecnologia que promete revolucionar vidas")
noticia <- html |>
html_elements("p.bbc-hhl7in") |>
html_text2()
noticia <- paste(noticia, collapse= " ")
artigos <- data.frame(titulo, noticia)
library(tidytext)
artigos|>
unnest_tokens(output = words, input = noticia) |>
count(words) |>
arrange(desc(n))
library(rvest)
library(dplyr)
url <- "https://www.bbc.com/portuguese/articles/cql3lwgl3ldo"
html <- read_html(url)
html
titulo <- html |>
html_elements('h1') |>
html_text2()
titulo <- ("Editar DNA é ético? O debate sobre tecnologia que promete revolucionar vidas")
noticia <- html |>
html_elements("p.bbc-hhl7in") |>
html_text2()
noticia <- paste(noticia, collapse= " ")
amostra <- sample(populacao, size = 500, replace = FALSE)
populacao <- sample(0:1, size =10000, replace = TRUE, prob = c(0.9,0.1))
amostra <- sample(populacao, size = 500, replace = FALSE)
valor_real = mean(populacao)
valor_real
inferiores <- c()
superiores <- c()
for(k in 1:100) {
amostra <- sample(populacao, size = 500, replace = FALSE)
media <- mean(amostra)
inferiores[k] <- media - 1.96*(sqrt(media*(1-media))/sqrt(500))
superiores[k] <- media + 1.96*(sqrt(media*(1-media))/sqrt(500))
}
setwd("~/Documentos/Estatística Computacional")
femur <- read.csv("femur.csv")
femur <- read.csv("femur.csv")
View(femur)
femur <- femur[,-1]
homens <- femur[femur$genero == 'Male',]
mulheres <- femur[femur$genero == 'Female',]
cor(homens$femur, homens$altura)
cor(mulheres$femur, mulheres$altura)
ggplot(data = homens, aes(x = femur, y = altura)) +
geom_point()
library(ggplot2)
femur <- read.csv("femur.csv")
femur <- femur[,-1]
homens <- femur[femur$genero == 'Male',]
mulheres <- femur[femur$genero == 'Female',]
cor(homens$femur, homens$altura)
cor(mulheres$femur, mulheres$altura)
ggplot(data = homens, aes(x = femur, y = altura)) +
geom_point()
ggplot(data = homens, aes(x = femur, y = altura)) +
geom_point()+
geom_smooth(method = "lm")
cor.test(homens$altura, homens$femur)
modelo <- lm
modelo <- lm(data = homens, formula = altura ~femur)
modelo
summary(modelo)
hist(modelo$residuals)
shapiro.test(modelo$residuals)
ggplot(data = homens, aes(x = femur, y = altura)) +
geom_point()+
geom_smooth(method = "lm")
modelo_linear <- lm(data = homens, formula = altura ~ femur)
summary(homens$femur)
cor.test(homens$altura, homens$femur)
modelo <- lm(data = homens, formula = altura ~femur)
modelo
summary(modelo)
hist(modelo$residuals)
shapiro.test(modelo$residuals)
View(modelo_linear)
install.packages("jpeg")
library(jpeg)
gatinha <- readJPEG("gatinha.jpeg")
str(gatinha)
gatinha[,,1]
as.vector(gatinha[,,2])
str(gatinha)
gatinha[,,1]
R <- as.vector(gatinha[,,1])
G <- as.vector(gatinha[,,2])
B <- as.vector(gatinha[,,3])
str(gatinha)
x <- rep(1:900, each = 600)
x <- rep(1:900, each = 1600)
y <- rep(1:1600, each = 900)
x
y
dados <- data.frame(x,y,R,G,B)
head(dados)
clusterizacao <- kmeans(x = dados[,3:5], centers = 3)
clusterizacao <- kmeans(x = dados[,3:5], centers = 3, nstart = 20)
clusterizacao
clusterizacao$centers
rgb(clusterizacao$centers)
cluster <- as.factor(clusterizacao$cluster)
dados$cluster <- cluster
head(dados)
cores <- rgb(clusterizacao$centers)
ggplot(data = dados, aex(x = x, y = y, col = cluster))+
geom_point()+
scale_color_manual(values = cores)+
theme_void()
ggplot(data = dados, aes(x = x, y = y, col = cluster))+
geom_point()+
scale_color_manual(values = cores)+
theme_void()
cores <- rgb(clusterizacao$centers)
cluster <- as.factor(clusterizacao$cluster)
dados$cluster <- cluster
ggplot(data = dados, aes(x = x, y = y, col = cluster))+
geom_point()+
scale_color_manual(values = cores)+
theme_void()
cores <- rgb(clusterizacao$centers)
cluster <- as.factor(clusterizacao$cluster)
dados$cluster <- cluster
ggplot(data = dados, aes(x = x, y = y, col = cluster))+
geom_point()+
scale_color_manual(values = cores)+
theme_void()
str(gatinha)
x <- rep(1:1600, each = 900)
y <- rep(1:900, each = 1600)
dados <- data.frame(x,y,R,G,B)
head(dados)
clusterizacao <- kmeans(x = dados[,3:5], centers = 3, nstart = 20)
cores <- rgb(clusterizacao$centers)
cluster <- as.factor(clusterizacao$cluster)
dados$cluster <- cluster
ggplot(data = dados, aes(x = x, y = y, col = cluster))+
geom_point()+
scale_color_manual(values = cores)+
theme_void()
